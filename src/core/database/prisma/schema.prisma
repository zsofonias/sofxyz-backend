

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id String @id @default(uuid())
  email String @unique
  firstname String
  middlename String?
  lastname String
  password String
  role Role @default(USER)

  portfolios Portfolio[]
  articles Article[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}



model Portfolio {
  id String @id @default(uuid())
  title String
  description String?
  image String?
  websiteUrl String?
  linkedinUrl String?
  githubUrl String?

  projects Project[]
  skills Skill[]
  experiences Experience[]
  educations Education[]

  user User? @relation(fields: [userId], references: [id])
  userId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("portfolios")
}

model Project {
  id String @id @default(uuid())
  title String
  description String?
  image String?
  link String?
  repoUrl String?
  
  portfolio Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Skill {
  id String @id @default(uuid())
  name String
  level SkillLevel?
  
  portfolio Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

model Experience {
  id String @id @default(uuid())
  title String
  company String?
  description String?
  startDate DateTime?
  endDate DateTime?
  
  portfolio Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("experiences")
}

model Education {
  id String @id @default(uuid())
  title String
  school String?
  description String?
  startDate DateTime?
  endDate DateTime?
  
  portfolio Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("educations")
}

model Article {
  id String @id @default(uuid())
  title String
  content String
  featuredImage String?
  slug String
  isPublished Boolean @default(false)
  
  author User? @relation(fields: [authorId], references: [id])
  authorId String?
  categories ArticleCategory[]
  tags ArticleTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  

  @@map("articles")
}

model ArticleCategory {
  id String @id @default(uuid())
  name String
  slug String
  
  articles Article[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("article_categories")
}

model ArticleTag {
  id String @id @default(uuid())
  name String
  slug String

  articles Article[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("article_tags")
}